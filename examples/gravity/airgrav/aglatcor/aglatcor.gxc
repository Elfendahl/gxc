//===========================================================================
// clang-format off
NAME          = "Calculate latitude correction"
#include <version.gxh>

TRANSLATIONDOMAIN = "gravity"
TRANSLATIONFRIENDLYPATH = "GX/AirGrav/Corrections by Steps"

DESCRIPTION   = "
   
   AGLATCOR.GRAV    Input Gravity channel
   AGLATCOR.LAT     Latitude channel
           .OUTCH   Latitude correction channel
		   .OUTGRAVCOR   Output gravity channel
			  .METHOD  IGF : IGF - Postsdam  Ellipsoide(1930)
					   IGSN71 :  IGSN71 (1967)
			           IAG : IAG - Telford (1976)
			           GRS80 : GRS80 - Moritz (1980)
					   IAG : IAG - Telford (1980)
"
// Revision History:
// v8.6 : Added latitude correction formula's and difference channel
// v8.5 : Added user-selection of correction formula, now default to Moritz (1980).
// v8.1.0: Replaced iGetLength_DB with iGetChannelLength_DB.
// v6.3: New GX.
    
//===========================================================================
//                               RESOURCES
//===========================================================================

RESOURCE = "aglatcor.gr"
#include "aglatcor.grh"

//===========================================================================
//                                INCLUDE
//===========================================================================

#include <all.gxh>
// clang-format on     // system

//===========================================================================
//                               VARIABLES
//===========================================================================

DB          Data;                   // Database handle
EDB         EData;                  // Edited database handle
DGW         Diag;                   // Dialogue handle
LST         List;                   // Channel list handle
EXP         Exp;
EXP         ExpGrav;

DB_SYMB     Line,LatCh,GravityCh,OutCh,OutGravCor;

int         i;                      // Utility

string(STR_DEFAULT)  sLatCh,sOutCh,sMethod,sGravCh,sOutGravCor;
string(512)          sFormula;
string(512)          sFormulaGrav;
//===========================================================================
//                                 CODE
//===========================================================================

{
   // --- Get database ---
   
   EData = Current_EDB();
   Data = Lock_EDB(EData);
   

   // --- Are we running interactively ? ---

   if (iInteractive_SYS())
   {

      // --- Create the Dialogue ---

      Diag = Create_DGW("AGLATCOR");
                                                 

      // --- Set up channel lists ---
      
      List = GetList_DGW(Diag,_AGLATCOR_0);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);

      List = GetList_DGW(Diag,_AGLATCOR_1);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);
     
	  List = GetList_DGW(Diag,_AGLATCOR_2);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);

	  List = GetList_DGW(Diag,_AGLATCOR_3);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);

      // --- Set any Defaults ---
	  
	  SetInfoSYS_DGW(Diag,_AGLATCOR_0,DGW_TEXT,"AGLATCOR","GRAV");
      SetInfoSYS_DGW(Diag,_AGLATCOR_1,DGW_TEXT,"AGLATCOR","LAT");
      SetInfoSYS_DGW(Diag,_AGLATCOR_2,DGW_TEXT,"AGLATCOR","OUTCH");
	  SetInfoSYS_DGW(Diag,_AGLATCOR_3,DGW_TEXT,"AGLATCOR","OUTGRAVCOR");  	   
      SetInfoSYS_DGW(Diag,_AGLATCOR_4,DGW_LISTALIAS,"AGLATCOR","METHOD");

     
      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i != 0) Cancel_SYS();           // They hit cancel
                                                 
     
      // --- Read inputs from the dialogue box ---
	  
      GetInfoSYS_DGW(Diag,_AGLATCOR_0,DGW_TEXT,"AGLATCOR","GRAV"); 
      GetInfoSYS_DGW(Diag,_AGLATCOR_1,DGW_TEXT,"AGLATCOR","LAT");
      GetInfoSYS_DGW(Diag,_AGLATCOR_2,DGW_TEXT,"AGLATCOR","OUTCH");
	  GetInfoSYS_DGW(Diag,_AGLATCOR_3,DGW_TEXT,"AGLATCOR","OUTGRAVCOR");
      GetInfoSYS_DGW(Diag,_AGLATCOR_4,DGW_LISTALIAS,"AGLATCOR","METHOD");
     
      // --- Destroy the Dialogue ---
     
      Destroy_DGW(Diag);
   }

   // --- Get Parameters ---
   GetString_SYS("AGLATCOR","GRAV",sGravCh);
   GetString_SYS("AGLATCOR","LAT",sLatCh);
   GetString_SYS("AGLATCOR","OUTCH",sOutCh);
   GetString_SYS("AGLATCOR","OUTGRAVCOR",sOutGravCor);  
   GetString_SYS("AGLATCOR","METHOD",sMethod);
    
   
   // --- Get handles to the input data channels ---

   if (!iExistChan_DB(Data,sGravCh))
      Abort_SYS(_("The gravity channel does not exist."));
	  
   if (!iExistChan_DB(Data,sLatCh))
      Abort_SYS(_("The latitude channel does not exist."));

   LatCh  = FindChan_DB(Data,sLatCh);
   LockSymb_DB(Data,LatCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);

   GravityCh  = FindChan_DB(Data,sGravCh);
   LockSymb_DB(Data,GravityCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);


   // --- Get handle to the output channel ---

   if (!iExistChan_DB(Data,sOutCh)) {
      OutCh = DupSymb_DB(Data,LatCh,sOutCh);
      SetChanFormat_DB(Data,OutCh,DB_CHAN_FORMAT_NORMAL);
   } else {
      OutCh = FindChan_DB(Data,sOutCh);
      LockSymb_DB(Data,OutCh,DB_LOCK_READWRITE,DB_WAIT_NONE);                                  
      SetChanProtect_DB(Data,OutCh,DB_CHAN_UNPROTECTED);     
   }   
    
   if (!iExistChan_DB(Data,sOutGravCor)) {
      OutGravCor = DupSymb_DB(Data,LatCh,sOutGravCor);
      SetChanFormat_DB(Data,OutGravCor,DB_CHAN_FORMAT_NORMAL);
   } else {
      OutGravCor = FindChan_DB(Data,sOutGravCor);
      LockSymb_DB(Data,OutGravCor,DB_LOCK_READWRITE,DB_WAIT_NONE);                                  
      SetChanProtect_DB(Data,OutGravCor,DB_CHAN_UNPROTECTED);     
   } 
	
   // --- Formula references ---
   //1930 - IGF ( Blakely R, 1996, p135, Potential theory in gravity & Magnetic Application )
   //1967 -  IGSN71  ( Blakely R, 1996, p135, Potential theory in gravity & Magnetic Application )  
   //1976 - IAG ( Telford W, etal 1976, p17, Applied Geophysics)
   //1980 - GRS80  Moritz  (Blakely R, 1996, p135, Potential theory in gravity & Magnetic Application )
   //1980 - IAG ( Telford W, etal 1980, p10, Applied Geophysics)
   
   // --- Create expression ---
	Strcpy_STR(sFormula,"@r2d=57.29578;@lat=$sLatCh/@r2d;@slat2=sin(@lat)**2;@slat2L=sin(2*@lat)**2;");
	if(iStrcmp_STR(sMethod, _n("1930"), STR_CASE_TOLERANT) == 0)
		Strcat_STR(sFormula,"$sOutCh=978049*(1+0.0052884*@slat2 - 0.0000059 * @slat2L);");
	if(iStrcmp_STR(sMethod, _n("1967"), STR_CASE_TOLERANT) == 0)
		Strcat_STR(sFormula,"$sOutCh= 978032.7 *(1+0.0053024 *@slat2 - 0.0000058 * @slat2L);");
	if(iStrcmp_STR(sMethod, _n("1976"), STR_CASE_TOLERANT) == 0)	
		Strcat_STR(sFormula,"$sOutCh= 978031.55 *(1+0.005278895 *@slat2 + 0.000023462 * @slat2**2);");
	if(iStrcmp_STR(sMethod, _n("GRS80"), STR_CASE_TOLERANT) == 0)
		Strcat_STR(sFormula,"$sOutCh= 978032.67714 *(1+0.00193185138639 * @slat2)/sqrt(1-0.00669437999013*@slat2);");
	if(iStrcmp_STR(sMethod, _n("1980"), STR_CASE_TOLERANT) == 0)
	    Strcat_STR(sFormula,"$sOutCh=978031.846*(1+0.005278895 * @slat2 + 0.000023462 * @slat2**2);");

   Exp = Create_EXP(Data,sFormula,512);


   // --- process the data ---

   Progress_SYS(1);
   ProgName_SYS(_("Calculating latitude correction"),0);

   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {
      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      
      if(iGetChannelLength_DB(Data, Line, LatCh) > 0) {

         // --- Evaluate expression ---

         Math_DU(Data,Line,Exp);
      }

      // --- Advance to Next Line ---        

      UnLockSymb_DB(Data,Line);
      Line = NextSelLine_DB(Data, Line );
   }
   Destroy_EXP(Exp);

   Progress_SYS(0);

  // --- Create difference expression ---

   Strcpy_STR(sFormulaGrav,"$sOutGravCor=($sGravCh-$sOutCh);");

   ExpGrav = Create_EXP(Data,sFormulaGrav,512);

  // --- process the data ---

   Progress_SYS(1);
   ProgName_SYS(_("Calculating gravity correction"),0);

   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {
      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      
      if(iGetChannelLength_DB(Data, Line, GravityCh) > 0) {

         // --- Evaluate expression ---

         Math_DU(Data,Line,ExpGrav);
      }

      // --- Advance to Next Line ---        

      UnLockSymb_DB(Data,Line);
      Line = NextSelLine_DB(Data, Line );
   }
   Destroy_EXP(ExpGrav);

   Progress_SYS(0);
   
   // --- Add maker ---

   EasyMakerSymb_DB(Data,OutCh,_("Latitude correction"),"AGLATCOR;");
   EasyMakerSymb_DB(Data,OutGravCor,_("Gravity correction"),"AGLATCOR;");

   // --- Set protection and units of output channel ---

   SetChanUnit_DB(Data,OutCh,_("mGal/m"));   
   SetChanLabel_DB(Data,OutCh,_("Latitude Correction"));
   SetChanProtect_DB(Data,OutCh,DB_CHAN_PROTECTED);

   SetChanUnit_DB(Data,OutGravCor,_("mGal"));   
   SetChanLabel_DB(Data,OutGravCor,_("Gravity Correction"));
   SetChanProtect_DB(Data,OutGravCor,DB_CHAN_PROTECTED);

   // --- Release GDB ---

   UnLockSymb_DB(Data,GravityCh);
   UnLockSymb_DB(Data,LatCh);
   UnLockSymb_DB(Data,OutCh);
   UnLockSymb_DB(Data,OutGravCor);
   UnLock_EDB(EData);


   // --- Set default for AGFREEAIR GX ---

   SetString_SYS("AGFREEAIR","LATCORCH", sOutCh);
   SetString_SYS("AGFREEAIR","GRAVCORCH", sOutGravCor);
   
   // --- Load channel ---

   LoadChan_EDB(EData,sOutCh);
   LoadChan_EDB(EData,sOutGravCor);
   
   Progress_SYS(0);      
}
