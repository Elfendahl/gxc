//*** extends 'class_empty.gxh'

#ifndef HDCOL_GXH_DEFINED
#define HDCOL_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class DCOL
//
//-----------------------------------------------------------------------------------------------------------
//
// Object to interface with 2D map and 3D view objects that supports colour tool editing.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// BRIGHT Definitions
//
// Brightness type
//
// BRIGHT_ALL
// Set the brightness of all the layers
//
// BRIGHT_LAYER
// Set the brightness of the current layer
//
//===========================================================================================================


#define BRIGHT_ALL 0
#define BRIGHT_LAYER 1


//===========================================================================================================
//
// BRIGHTNESS_TYPES Definitions
//
// Detrending option
//
// BRIGHTNESS_ALL
// Can set the brightness only for object as a whole
//
// BRIGHTNESS_ALL_AND_LAYERS
// Can set the brightness for object as a whole and for individual layers
//
//===========================================================================================================


#define BRIGHTNESS_ALL 0
#define BRIGHTNESS_ALL_AND_LAYERS 1


//===========================================================================================================
//
// DCOL_TYPE Definitions
//
// Layer type
//
// DCOL_TYPE_UNKNOWN
// 
//
// DCOL_TYPE_GRID
// 
//
// DCOL_TYPE_SYMBOLS
// 
//
// DCOL_TYPE_VOXEL
// 
//
// DCOL_TYPE_VECTOR_VOXEL
// 
//
//===========================================================================================================


#define DCOL_TYPE_UNKNOWN 0
#define DCOL_TYPE_GRID 1
#define DCOL_TYPE_SYMBOLS 2
#define DCOL_TYPE_VOXEL 3
#define DCOL_TYPE_VECTOR_VOXEL 4





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// iNumberOfLayers_DCOL Get the number of layers.
//
// Returns              The number of layers (often just one).
//
// Available            2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iNumberOfLayers_DCOL(DCOL);  // DCOL Handle


  
//-----------------------------------------------------------------------------------------------------------
// iGetType_DCOL Get a layer's type
//
// Returns       DCOL_TYPE
//
// Available     2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iGetType_DCOL(DCOL);  // DCOL Handle


  
//-----------------------------------------------------------------------------------------------------------
// GetLayerInfo_DCOL Get a layer's information
//
// Available         2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetLayerInfo_DCOL(DCOL,         // DCOL Handle
                                     int,          // Index of layer
                                     ITR,          // ITR Handle
                                     var string,   // Name returned
                                     int);         // Name size
#define _GetLayerInfo_DCOL(dcol, index, itr, layer_name) GetLayerInfo_DCOL(dcol, index, itr, layer_name, sizeof(layer_name))


  
//-----------------------------------------------------------------------------------------------------------
// GetLayerITR_DCOL Get a layer's ITR
//
// Available        2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetLayerITR_DCOL(DCOL,   // DCOL Handle
                                    int,    // Index of layer
                                    ITR);   // ITR Handle


  
//-----------------------------------------------------------------------------------------------------------
// SetLayerITR_DCOL Set a layer's ITR
//
// Available        2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetLayerITR_DCOL(DCOL,   // DCOL Handle
                                    int,    // Index of layer
                                    ITR,    // ITR Handle
                                    int);   // Force redraw of map (0: No, 1: Yes)?


  
//-----------------------------------------------------------------------------------------------------------
// iSetITRTransformFromLayer_DCOL Set the input ITR transform to the provided type, based on the statistics of the chosen layer.
//
// Returns                        0 - Ok
//                                1 - Cancel
//
// Notes                          If the input tranform type is ITR_ZONE_MODEL_NOZONE or ITR_ZONE_MODEL_NONE
//                                then the user-preference default will be used.
//                                NOTE: This alters the input ITR, not the selected layer's own ITR. The layer is accessed
//                                purely to get the current statistics.
//
// Available                      2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iSetITRTransformFromLayer_DCOL(DCOL,   // DCOL Handle
                                                 int,    // Index of layer
                                                 ITR,    // ITR Handle
                                                 int);   // ITR_ZONE_MODEL


  
//-----------------------------------------------------------------------------------------------------------
// iUpdateZoneTransformType_DCOL Recalculate the layer's ITR to the provided type, based on the statistics of the chosen layer.
//
// Returns                       0 - Ok
//                               1 - Cancel
//
// Notes                         If the input tranform type is ITR_ZONE_MODEL_NOZONE, ITR_ZONE_MODEL_NONE then nothing will happen
//                               and the function will return 1. The dialogs to enter parameters are shown for Linear, Log, Normal and Equal.
//
// Available                     2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iUpdateZoneTransformType_DCOL(DCOL,   // DCOL Handle
                                                int,    // Index of layer
                                                int);   // ITR_ZONE_MODEL


  
//-----------------------------------------------------------------------------------------------------------
// GetLayerStatistics_DCOL Get a ST filled with layer statistics
//
// Returns                 ST object
//
// Available               2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] ST GetLayerStatistics_DCOL(DCOL,   // DCOL Handle
                                         int);   // Index of layer


  
//-----------------------------------------------------------------------------------------------------------
// GetLayerHistogram_DCOL Get a VV filled with histogram bin counts for each zone of the ITR
//
// Returns                VV object
//
// Available              2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] VV GetLayerHistogram_DCOL(DCOL,       // DCOL Handle
                                        int,        // Index of layer
                                        var real,   // width of bin increment
                                        var real);  // Min (value at start of 2nd bin)


  
//-----------------------------------------------------------------------------------------------------------
// SaveLayerITR_DCOL Save the layer's ITR to a file. A dialog prompts for the file name.
//
// Available         2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SaveLayerITR_DCOL(DCOL,   // DCOL Handle
                                     int);   // Index of layer


  
//-----------------------------------------------------------------------------------------------------------
// iGetBrightnessType_DCOL Is brightness set separately by layer and by object or just by object?
//
// Returns                 BRIGHTNESS_ALL - Set brightness for the object as a whole only
//                         BRIGHTNESS_ALL_AND_LAYERS - Set brightness either for the object as a whole or by layer
//
// Notes                   For some objects (like AGG) brightness can be set for each layer, or for the object as a whole, while in others
//                         (like CSYMB) it can be set only for the object as a whole.
//
// Available               2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iGetBrightnessType_DCOL(DCOL);  // DCOL Handle


  
//-----------------------------------------------------------------------------------------------------------
// SetBrightness_DCOL Set the brightness of a single layer, or all the layers
//
// Available          2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetBrightness_DCOL(DCOL,   // DCOL Handle
                                      real,   // Brightness value (-1.0 (black) <= brightness <= 1.0 (white))
                                      int,    // BRIGHT
                                      int);   // layer index (required for BRIGHT_LAYER


  
//-----------------------------------------------------------------------------------------------------------
// rGetBrightness_DCOL Get the brightness of a single layer, or all the layers
//
// Available           2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] real rGetBrightness_DCOL(DCOL,   // DCOL Handle
                                       int,    // BRIGHT
                                       int);   // layer index (required for BRIGHT_LAYER


  
//-----------------------------------------------------------------------------------------------------------
// SetTransparency_DCOL Set the transparency. This is set for the entire map group.
//
// Available            2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetTransparency_DCOL(DCOL,   // DCOL Handle
                                        real);  // Transparency value (1.0 - Opaque, 0.0 - Transparent)


  
//-----------------------------------------------------------------------------------------------------------
// rGetTransparency_DCOL Get the transparency. This is returned for the entire map group.
//
// Available             2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] real rGetTransparency_DCOL(DCOL);  // DCOL Handle


  
//-----------------------------------------------------------------------------------------------------------
// Reset_DCOL Reset the AGG back to its initial state. Same as cancelling out of the colour tool and restarting; all layers are reset.
//
// Available  2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] void Reset_DCOL(DCOL);  // DCOL Handle


  
//-----------------------------------------------------------------------------------------------------------
// End_DCOL TODO
//
// Available 2021.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] void End_DCOL(DCOL,   // DCOL Handle
                            int);   // Apply changes to map.





//*** endblock Generated


#endif
