//*** extends 'class_empty.gxh'

#ifndef HVOXE_GXH_DEFINED
#define HVOXE_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class VOXE
//
//-----------------------------------------------------------------------------------------------------------
//
// VOX evaluator class. Used to sample values from
// the voxel.
//
//-----------------------------------------------------------------------------------------------------------

//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// Define VOXE_EVAL
//
// Voxel Evaluation modes
//
// VOXE_EVAL_NEAR
// Nearest value
//
// VOXE_EVAL_INTERP
// Linear Interpolation
//
// VOXE_EVAL_BEST
// Best Interpolation
//
//===========================================================================================================

#define VOXE_EVAL_NEAR 0
#define VOXE_EVAL_INTERP 1
#define VOXE_EVAL_BEST 2





//===========================================================================================================
//
// Miscellaneous
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// Create_VOXE Create a handle to an VOXE object
//
// Returns     VOXE handle, terminates if creation fails
//
// Available   6.3
//-----------------------------------------------------------------------------------------------------------

[_public] VOXE Create_VOXE(VOX);  // VOX Object


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_VOXE Destroy a VOXE.
//
// Available    6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void Destroy_VOXE(VOXE);  // VOXE to destroy.


  
//-----------------------------------------------------------------------------------------------------------
// Profile_VOXE Extract a profile of data along points provided.
//
// Available    6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void Profile_VOXE(VOXE,   // VOXE object
                            VV,     // X VV (must be double)
                            VV,     // Y VV (must be double)
                            VV,     // Z VV (must be double)
                            VV,     // D VV (must be double)
                            int);   // VOXE_EVAL


  
//-----------------------------------------------------------------------------------------------------------
// rValue_VOXE Get a value at a specific point
//
// Returns     Value at the point or DUMMY if not valid
//
// Available   6.3
//-----------------------------------------------------------------------------------------------------------

[_public] real rValue_VOXE(VOXE,   // VOXE object
                           real,   // X Location
                           real,   // Y Location
                           real,   // Z Location
                           int);   // VOXE_EVAL


  
//-----------------------------------------------------------------------------------------------------------
// Vector_VOXE Extract a profile of data along a vector
//
// Available   6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void Vector_VOXE(VOXE,   // VOXE object
                           real,   // X Origin
                           real,   // Y Origin
                           real,   // Z Origin
                           real,   // X Delta
                           real,   // Y Delta
                           real,   // Z Delta
                           VV,     // Data VV (must be double)
                           int);   // VOXE_EVAL





//*** endblock Generated

#endif