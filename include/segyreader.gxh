//*** extends 'class_empty.gxh'

#ifndef HSEGYREADER_GXH_DEFINED
#define HSEGYREADER_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class SEGYREADER
//
//-----------------------------------------------------------------------------------------------------------
//
// Convert 3D SEG Y files to voxel or database.
//
//-----------------------------------------------------------------------------------------------------------

//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// OpenFile_SEGYREADER Opens a 3D SEG Y file.
//
// Returns             SEGYREADER handle, terminates if creation fails.
//
// Available           9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] SEGYREADER OpenFile_SEGYREADER(string);  // File name


  
//-----------------------------------------------------------------------------------------------------------
// SetIs3D_SEGYREADER Specify if the input SEG-Y file is 3D or 2D.
//
// Available          9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetIs3D_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                    int);         // True is file is 3D, false for 2D.


  
//-----------------------------------------------------------------------------------------------------------
// GetIs3D_SEGYREADER Returns true if the file is 3D false if it is 2D.
//
// Available          9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] int GetIs3D_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// GetEndianess_SEGYREADER Returns true if the file is little endian. false if it is big endian.
//
// Available               9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] int GetEndianess_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// SetEndianess_SEGYREADER Set the endianess of the file.
//
// Available               9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetEndianess_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                         int);         // True is file is little endian, false for big endian.


  
//-----------------------------------------------------------------------------------------------------------
// GetXYUnits_SEGYREADER Get the currently-specified xy-units.
//
// Available             9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetXYUnits_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                       var string,   // The name of the units.
                                       int);         //
#define _GetXYUnits_SEGYREADER(segy_reader, xy_units) GetXYUnits_SEGYREADER(segy_reader, xy_units, sizeof(xy_units))


  
//-----------------------------------------------------------------------------------------------------------
// SetZType_SEGYREADER Specify if the z-dimension is time or depth.
//
// Available           9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetZType_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                     string);      // Either "DEPTH" or "TIME".


  
//-----------------------------------------------------------------------------------------------------------
// GetZType_SEGYREADER Indicate if the z-dimension is time or depth.
//
// Available           9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetZType_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                     var string,   // Either "DEPTH" or "TIME".
                                     int);         //
#define _GetZType_SEGYREADER(segy_reader, z_type) GetZType_SEGYREADER(segy_reader, z_type, sizeof(z_type))


  
//-----------------------------------------------------------------------------------------------------------
// GetPossibleZUnits_SEGYREADER Get a list of the possible values that can be passed to `SetZUnits()`. The values returned by this function depend on what the z-type is set to.
//
// Available                    9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetPossibleZUnits_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                              var string,   // List of possible z-units,separated by newlines
                                              int);         //
#define _GetPossibleZUnits_SEGYREADER(segy_reader, z_units_list) GetPossibleZUnits_SEGYREADER(segy_reader, z_units_list, sizeof(z_units_list))


  
//-----------------------------------------------------------------------------------------------------------
// GetZUnits_SEGYREADER Get the currently-specified z-units.
//
// Available            9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetZUnits_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                      var string,   // The name of the z-units.
                                      int);         //
#define _GetZUnits_SEGYREADER(segy_reader, z_units) GetZUnits_SEGYREADER(segy_reader, z_units, sizeof(z_units))


  
//-----------------------------------------------------------------------------------------------------------
// SetZUnits_SEGYREADER Set the z-units.
//
// Available            9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetZUnits_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                      string);      // The Z units. Must be one of the strings returned by `GetPossibleZUnits()`.


  
//-----------------------------------------------------------------------------------------------------------
// GetZOffsetUnits_SEGYREADER Get the currently-specified units for the z offset.
//
// Available                  9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetZOffsetUnits_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                            var string,   // List of possible z-units,separated by newlines
                                            int);         //
#define _GetZOffsetUnits_SEGYREADER(segy_reader, z_units) GetZOffsetUnits_SEGYREADER(segy_reader, z_units, sizeof(z_units))


  
//-----------------------------------------------------------------------------------------------------------
// SetZOffsetUnits_SEGYREADER Set the units that the z-offset is in.
//
// Available                  9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetZOffsetUnits_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                            string);      // The Z units. Must be one of the strings returned by `GetPossibleZUnits()`.


  
//-----------------------------------------------------------------------------------------------------------
// GetLastSampleAt_SEGYREADER Returns the depth of the last sample in the traces, in the units specified by `SetZUnits()`
//
// Available                  9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetLastSampleAt_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                            var real);    // Out-parameter containing the depth of the last sample in the traces.


  
//-----------------------------------------------------------------------------------------------------------
// ListBinaryHeaderFields_SEGYREADER Returns the names and offsets of the fields in the binary header.
//
// Available                         9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] LTB ListBinaryHeaderFields_SEGYREADER();


  
//-----------------------------------------------------------------------------------------------------------
// ListTraceHeaderFields_SEGYREADER Returns the names and offsets of the fields in the trace header.
//
// Available                        9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] LTB ListTraceHeaderFields_SEGYREADER();


  
//-----------------------------------------------------------------------------------------------------------
// GetTextHeader_SEGYREADER Get the SEG Y file's text header.
//
// Available                9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetTextHeader_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                          var string,   // The text header contents.
                                          int);         //
#define _GetTextHeader_SEGYREADER(segy_reader, text) GetTextHeader_SEGYREADER(segy_reader, text, sizeof(text))


  
//-----------------------------------------------------------------------------------------------------------
// GetBinaryHeader_SEGYREADER Get the SEG Y file's binary header.
//
// Returns                    :class:'LTB' containing three columns: the field name, offset, and value. The value column will be in text form, suitable for display to the end user.
//
// Available                  9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] LTB GetBinaryHeader_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// GetTraceDataAt_SEGYREADER Get the SEG Y trace file data for a particular data type, number of samples, and starting trace
//
// Returns                   :class:'VV' containing the data from the traces
//
// Available                 9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] VV GetTraceDataAt_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                         string,       // The name of a supported data type.
                                         int,          // The number of samples to return
                                         int,          // The trace to start at
                                         int);         // 1 for big endian, 0 for small


  
//-----------------------------------------------------------------------------------------------------------
// GetTraceHeaderAt_SEGYREADER Get the SEG Y trace file header data for a particular starting trace
//
// Returns                     :class:'VV' containing the data from the trace header
//
// Available                   9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] VV GetTraceHeaderAt_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                           string,       // The name of a supported data type.
                                           int,          // The number of samples to return
                                           int,          // The trace to start at
                                           int);         // 1 for big endian, 0 for small


  
//-----------------------------------------------------------------------------------------------------------
// EstimateNumberOfTraces_SEGYREADER Get the number of traces that would be in the SEG-Y file, given a trace length and data type.
//
// Available                         9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] int EstimateNumberOfTraces_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                  string,       // The name of a supported data type.
                                                  int);         // The number of samples to return


  
//-----------------------------------------------------------------------------------------------------------
// GetNumTraceDataTypes_SEGYREADER Returns the number of supported trace data types.
//
// Available                       9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] int GetNumTraceDataTypes_SEGYREADER();


  
//-----------------------------------------------------------------------------------------------------------
// GetTraceDataTypeName_SEGYREADER Get the name of one of the available data types. These are the names used as identifiers in this API. To get a name suitable for displaying to the user, use `GetTraceDataTypeDisplayName() instead.
//
// Available                       9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetTraceDataTypeName_SEGYREADER(int,          // Which name to return. Call this function  for each value between 0 and the value returned by `GetNumTraceTypes()` to get a full list of the available types.
                                                 var string,   // The name of a supported data type.
                                                 int);         //
#define _GetTraceDataTypeName_SEGYREADER(index, name) GetTraceDataTypeName_SEGYREADER(index, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// GetTraceDataTypeDisplayName_SEGYREADER Get a string, suitable for displaying to the user, describing the type returned by passing the same `index` value to `GetTraceDataTypeName()`
//
// Available                              9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetTraceDataTypeDisplayName_SEGYREADER(int,          // Which name to return.
                                                        var string,   // The display name of a supported data type.
                                                        int);         //
#define _GetTraceDataTypeDisplayName_SEGYREADER(index, name) GetTraceDataTypeDisplayName_SEGYREADER(index, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// GetTraceDataType_SEGYREADER Get the data type of the trace data. This will match one of the names rfeturned by `GetTraceDataTypeName()`
//
// Available                   9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetTraceDataType_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                             var string,   // The name of data type.
                                             int);         //
#define _GetTraceDataType_SEGYREADER(segy_reader, name) GetTraceDataType_SEGYREADER(segy_reader, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// SetTraceDataType_SEGYREADER Set the data type of the trace data. This must match one of the names returned by `GetTraceDataTypeName()`
//
// Available                   9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetTraceDataType_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                             string);      // The name of data type.


  
//-----------------------------------------------------------------------------------------------------------
// GetTraceLengthConfiguration_SEGYREADER Specifies where the trace length comes from: can be a field in the binary file header, a field in the trace header, or a value specified by the user.
//
// Available                              9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetTraceLengthConfiguration_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                        var string,   // Out-parameter indicating which header contains the trace length: "file_header" "trace_header", or "none"
                                                        int,          // Size of which_header buffer.
                                                        var int);     // Out-parameter containing the byte offset of the field within the header (if applicable)
#define _GetTraceLengthConfiguration_SEGYREADER(segy_reader, which_header, location) GetTraceLengthConfiguration_SEGYREADER(segy_reader, which_header, sizeof(which_header), location)


  
//-----------------------------------------------------------------------------------------------------------
// SetTraceLengthConfiguration_SEGYREADER Specifies where the trace length comes from: can be a field in the binary file header, a field in the trace header, or a value specified by the user.
//
// Available                              9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetTraceLengthConfiguration_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                        string,       // Which header contains the trace length: "file_header", "trace_header" or "none"
                                                        int);         // If `which_header` is "file_header" or "trace_header", then this parameter is the offset of the field containing the trace length. If `which_header` is "none", then this parameter is the actual trace length.


  
//-----------------------------------------------------------------------------------------------------------
// GetTraceLength_SEGYREADER Returns the number of data samples per trace.
//
// Available                 9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] int GetTraceLength_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// GetSampleIntervalConfiguration_SEGYREADER Specifies where the sample interval comes from: can be a field in the binary file header, a field in the trace header, or a value specified by the user.
//
// Available                                 9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetSampleIntervalConfiguration_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                           var string,   // Out-parameter indicating which header contains the trace length: "file_header" "trace_header", or "none"
                                                           int,          // Size of which_header buffer.
                                                           var int);     // Out-parameter containing the byte offset of the field within the header (if applicable)
#define _GetSampleIntervalConfiguration_SEGYREADER(segy_reader, which_header, location) GetSampleIntervalConfiguration_SEGYREADER(segy_reader, which_header, sizeof(which_header), location)


  
//-----------------------------------------------------------------------------------------------------------
// SetSampleIntervalConfiguration_SEGYREADER Specifies where the sample interval comes from: can be a field in the binary file header, a field in the trace header, or a value specified by the user.
//
// Available                                 9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetSampleIntervalConfiguration_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                           string,       // Which header contains the sample interval: "file_header", "trace_header" or "none"
                                                           int,          // If `which_header` is "file_header" or "trace_header", then this parameter is the offset of the field containing the sample interval. If `which_header` is "none", thenthis parameter is ignored.
                                                           real);        // If `which_header` is "file_header" or "trace_header", then this parameter is ignored. If `which_header` is "none", thenthis parameter is the sample interval.


  
//-----------------------------------------------------------------------------------------------------------
// GetSampleInterval_SEGYREADER Returns the sample interval of the trace data.
//
// Available                    9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetSampleInterval_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                              var real);    // output parameter for sample interval


  
//-----------------------------------------------------------------------------------------------------------
// GetZOffsetConfiguration_SEGYREADER Specifies where the z-offset (time delay) comes from: can be a field in the binary file header, a field in the trace header, or a value specified by the user.
//
// Available                          9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetZOffsetConfiguration_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                    var string,   // Out-parameter indicating which header contains the z offset: "file_header" "trace_header", or "none"
                                                    int,          // Size of which_header buffer.
                                                    var int);     // Out-parameter containing the byte offset of the field within the header (if applicable)
#define _GetZOffsetConfiguration_SEGYREADER(segy_reader, which_header, location) GetZOffsetConfiguration_SEGYREADER(segy_reader, which_header, sizeof(which_header), location)


  
//-----------------------------------------------------------------------------------------------------------
// SetZOffsetConfiguration_SEGYREADER Specifies where the z-offset (time delay) comes from: can be a field in the binary file header, a field in the trace header, or a value specified by the user.
//
// Available                          9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetZOffsetConfiguration_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                    string,       // Which header contains the z offset: "file_header", "trace_header" or "none"
                                                    int,          // If `which_header` is "file_header" or "trace_header", then this parameter is the offset of the field. If `which_header` is "none", then this parameter is ignored.
                                                    real);        // If `which_header` is "file_header" or "trace_header", then this parameter is ignored. If `which_header` is "none", then this parameter is the z offset.


  
//-----------------------------------------------------------------------------------------------------------
// GetZOffset_SEGYREADER Returns the z-offset (time delay) of the trace data. Positive values correspond to a deeper top-of-trace; negative values to a higher top-of-trace.
//
// Available             9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetZOffset_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                       var real);    // The z offset/time delay


  
//-----------------------------------------------------------------------------------------------------------
// ScanFile_SEGYREADER Scans the SEG Y file, and attempts to guess the layout.
//
// Available           9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ScanFile_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// GetFieldConfiguration_SEGYREADER Returns information on the data in the trace headers.
//
// Returns                          :class:'LTB' containing trace header information
//
// Available                        9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] LTB GetFieldConfiguration_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// SetFieldConfiguration_SEGYREADER Sets the interpretation of the fields in the SEG Y file, and specifies which fields should be exported to GDB.
//
// Available                        9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetFieldConfiguration_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                  LTB);         // LTB following the same format as returned by `GetFieldConfiguration()`.


  
//-----------------------------------------------------------------------------------------------------------
// GetTraceCount_SEGYREADER Get the number of traces in the SEG Y file
//
// Available                9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetTraceCount_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                          var int);     // Trace count


  
//-----------------------------------------------------------------------------------------------------------
// CheckSaneInlineCrossline_SEGYREADER Checks if the currently-configured inline and crossline fields seem sensible.
//
// Available                           9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void CheckSaneInlineCrossline_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                     var int,      // True is inline/crossline values seem sensible.
                                                     var int,      // True if it looks like the inline and crossline fields are swapped.
                                                     var int);     // True if it looks like the file only contains one line. This may mean the file is 2D.


  
//-----------------------------------------------------------------------------------------------------------
// GetVoxelDimensions_SEGYREADER Get the size of the voxel that would be exported with the current configuration.
//
// Available                     9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetVoxelDimensions_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                               var int,      // Voxel size along X
                                               var int,      // Voxel size along Y
                                               var int);     // Voxel size along Z


  
//-----------------------------------------------------------------------------------------------------------
// GetVoxelCellSize_SEGYREADER Get the cell size of the voxel that would be exported with the current configuration.
//
// Available                   9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetVoxelCellSize_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                             var real,     // Voxel cell size along X
                                             var real,     // Voxel cell size along Y
                                             var real);    // Voxel cell size along Z


  
//-----------------------------------------------------------------------------------------------------------
// SetAutoVoxelCellSizeXY_SEGYREADER Set the XY cell size of the voxel that would be exported to the dimensions calculated from the tie points..
//
// Available                         9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetAutoVoxelCellSizeXY_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// SetUserVoxelCellSizeXY_SEGYREADER Set the XY cell size of the voxel that would be exported with the current configuration.
//
// Available                         9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetUserVoxelCellSizeXY_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                   real,         // Voxel cell size along X
                                                   real);        // Voxel cell size along Y


  
//-----------------------------------------------------------------------------------------------------------
// GetGeoreferencing_SEGYREADER Returns the georeferencing of the voxel that would be exported with the current configuration.
//
// Available                    9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] IPJ GetGeoreferencing_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// SetGeoreferencing_SEGYREADER Sets the georeferencing of the voxel that would be exported with the current configuration.
//
// Available                    9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetGeoreferencing_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                              IPJ);         //


  
//-----------------------------------------------------------------------------------------------------------
// GetTiePoint_SEGYREADER Return  the currently-active tie points. If SetTiePoints() has not already been called, then the returned points will be the automatically-selected ones.
//
// Available              9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetTiePoint_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                        int,          // Tie point indexl must be 0, 1 or 2.
                                        var real,     // x-coordinate
                                        var real,     // inline-coordinate
                                        var int,      // Tie point index.
                                        var int);     // crossline-coordinate


  
//-----------------------------------------------------------------------------------------------------------
// SetTiePoint_SEGYREADER Set the currently-active tie points. If SetTiePoints() has not already been called, then the returned points will be the automatically-selected ones.
//
// Available              9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetTiePoint_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                        int,          // Tie point index.
                                        real,         // x-coordinate
                                        real,         // inline-coordinate
                                        int,          // Tie point index.
                                        int);         // crossline-coordinate


  
//-----------------------------------------------------------------------------------------------------------
// RecalculateGeoreferencing_SEGYREADER Recalculate georeferencing; call after configuration has changed.
//
// Available                            9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void RecalculateGeoreferencing_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// ResetTiePoints_SEGYREADER Discard user-supplied tie points and auto-choose new ones..
//
// Available                 9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ResetTiePoints_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// GetInlineAndCrosslineAzimuths_SEGYREADER Get the inline and crossline azimuths, in degrees
//
// Available                                9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetInlineAndCrosslineAzimuths_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                          var real,     // Inline azimuth
                                                          var real);    // Crossline azimuth


  
//-----------------------------------------------------------------------------------------------------------
// ExportVoxelAndDatabase_SEGYREADER Exports contents of SEG Y file to voxel and/or database.
//
// Available                         9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportVoxelAndDatabase_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                   string,       // Output voxel file name
                                                   string);      // Output database file name


  
//-----------------------------------------------------------------------------------------------------------
// SetGdbOutputFilename_SEGYREADER Exports contents of SEG Y file to a database.
//
// Available                       9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetGdbOutputFilename_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                 string);      // Output database file name


  
//-----------------------------------------------------------------------------------------------------------
// SetVoxelOutputFilename_SEGYREADER Exports contents of SEG Y file to voxel.
//
// Available                         9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetVoxelOutputFilename_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                   string);      // Output voxel file name


  
//-----------------------------------------------------------------------------------------------------------
// SetSectionOutputFilename_SEGYREADER Exports contents of SEG Y file to a crooked section.
//
// Available                           9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetSectionOutputFilename_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                     string);      // Output crooked section file name


  
//-----------------------------------------------------------------------------------------------------------
// SetSliceOutputPrefix_SEGYREADER Exports inline or crossline slices to a section grid.
//
// Available                       9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetSliceOutputPrefix_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                 string);      // Output section file name prefix


  
//-----------------------------------------------------------------------------------------------------------
// SetInlineSliceIndices_SEGYREADER Which inline slices to export to a section grid.
//
// Available                        9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetInlineSliceIndices_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                  VV);          // Which inline values to export.


  
//-----------------------------------------------------------------------------------------------------------
// SetCrosslineSliceIndices_SEGYREADER Which crossline slices to export to a section grid.
//
// Available                           9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetCrosslineSliceIndices_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                     VV);          // Which crossline values to export.


  
//-----------------------------------------------------------------------------------------------------------
// SetZSliceIndices_SEGYREADER Which z slices to export to a section grid.
//
// Available                   9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetZSliceIndices_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                             VV);          // Which z values to export.


  
//-----------------------------------------------------------------------------------------------------------
// GetSliceFilenames_SEGYREADER Returns a list of the filenames of the XY slices that will be exported.
//
// Available                    9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetSliceFilenames_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                              var string,   // List of filenames,separated by newlines
                                              int);         //
#define _GetSliceFilenames_SEGYREADER(segy_reader, filename_list) GetSliceFilenames_SEGYREADER(segy_reader, filename_list, sizeof(filename_list))


  
//-----------------------------------------------------------------------------------------------------------
// SetZDecimation_SEGYREADER Sets Z decimation factor.
//
// Available                 9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetZDecimation_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                           int);         // Decimation factor


  
//-----------------------------------------------------------------------------------------------------------
// SetUserZRange_SEGYREADER Sets Z-range to clamp to.
//
// Available                9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetUserZRange_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                          real,         // Z minimum
                                          real);        // Z maximum


  
//-----------------------------------------------------------------------------------------------------------
// ClearUserZRange_SEGYREADER Clears Z-range to clamp to, disbling z-clamping.
//
// Available                  9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ClearUserZRange_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// SetUserInlineRange_SEGYREADER Sets inline-range to clamp to.
//
// Available                     9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetUserInlineRange_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                               int,          // inline minimum
                                               int,          // inline maximum
                                               int,          // inline stride
                                               int);         // Decimation factor


  
//-----------------------------------------------------------------------------------------------------------
// SetUserCrosslineRange_SEGYREADER Sets crossline-range to clamp to.
//
// Available                        9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetUserCrosslineRange_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                  int,          // crossline minimum
                                                  int,          // crossline maximum
                                                  int,          // crossline stride
                                                  int);         // Decimation factor


  
//-----------------------------------------------------------------------------------------------------------
// ClearUserRange_SEGYREADER Clears inline and crossline ranges to clamp to.
//
// Available                 9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ClearUserRange_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// SetTraceDummyValue_SEGYREADER Sets the trace dummy value.
//
// Available                     9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SetTraceDummyValue_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                               real);        // trace dummy value


  
//-----------------------------------------------------------------------------------------------------------
// ClearTraceDummyValue_SEGYREADER Disables the trace dummy value.
//
// Available                       9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ClearTraceDummyValue_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// GetClipXYExtents_SEGYREADER Gets the X,Y extents to clip the voxel.
//
// Available                   9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetClipXYExtents_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                             var int,      // is clip area valid
                                             var real,     // minimum X value
                                             var real,     // maximum X value
                                             var real,     // minimum Y value
                                             var real);    // maximum Y value


  
//-----------------------------------------------------------------------------------------------------------
// AddTraceFilter_SEGYREADER Add a filter based on trace header fields.
//
// Available                 9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void AddTraceFilter_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                           int,          // byte-offset of the field to filter by.
                                           int,          // If `constraint` is EQUAL and NOT_EQUAL, this is the value to compare the field to. For IN_RANGE and NOT_IN_RANGE, this is the minimum.
                                           int,          // If `constraint` is EQUAL and NOT_EQUAL, this parameter is ignored For IN_RANGE and NOT_IN_RANGE, this is the maximum.
                                           string);      // How the values are compared. Can be "IN_RANGE", "NOT_IN_RANGE", "EQUAL" or "NOT_EQUAL".


  
//-----------------------------------------------------------------------------------------------------------
// ClearTraceFilters_SEGYREADER Remove all active trace filters.
//
// Available                    9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ClearTraceFilters_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// CountTracesThatPassFilters_SEGYREADER Count the number of traces that pass the currently-configured trace filters.
//
// Available                             9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] int CountTracesThatPassFilters_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// OverrideNavigation2D_SEGYREADER Specify the X/Y coordinates of the traces, instead of using values from the trace headers.
//
// Available                       9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void OverrideNavigation2D_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                 VV,           // The shotpoint coordinates, asread from the trace headers.
                                                 VV,           // The x-coordinates
                                                 VV);          // The y-coordinates


  
//-----------------------------------------------------------------------------------------------------------
// ExportFiles_SEGYREADER Exports contents of SEG Y file to voxel and/or database.
//
// Available              9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportFiles_SEGYREADER(SEGYREADER);  // SEGYREADER object


  
//-----------------------------------------------------------------------------------------------------------
// GetTraceHeaderAsJson_SEGYREADER Return the contents of a trace header as JSON.
//
// Available                       9.10
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetTraceHeaderAsJson_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                                 int,          // Which trace to read
                                                 var string,   // Trace header as JSON.
                                                 int);         //
#define _GetTraceHeaderAsJson_SEGYREADER(segy_reader, trace_number, text) GetTraceHeaderAsJson_SEGYREADER(segy_reader, trace_number, text, sizeof(text))


  
//-----------------------------------------------------------------------------------------------------------
// GetTraceData_SEGYREADER Get the SEG Y trace file header data for a particular starting trace
//
// Returns                 :class:'VV' containing the data from the trace header
//
// Available               9.10
//-----------------------------------------------------------------------------------------------------------

[_licensed] VV GetTraceData_SEGYREADER(SEGYREADER,   // SEGYREADER object
                                       int);         // Which trace to read





//*** endblock Generated


#endif
