//*** extends 'class_empty.gxh'

#ifndef HPG_GXH_DEFINED
#define HPG_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class PG
//
//-----------------------------------------------------------------------------------------------------------
//
// Pager methods for large 2-D arrays
// This class handles very-large 2-D arrays in which efficient
// access is required along both rows and columns.
//
//-----------------------------------------------------------------------------------------------------------
// Notes
//
// Typically a grid is accessed using the IMG class, and a PG
// is obtained from the IMG using the GetPG_IMG function.
// Following operations on the PG, it can be written back to
// the IMG using SetPG_IMG.
//
//-----------------------------------------------------------------------------------------------------------

//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// PG_3D_DIR Definitions
//
// 3D Pager direction
//
// PG_3D_DIR_XYZ
// 
//
// PG_3D_DIR_YXZ
// 
//
// PG_3D_DIR_XZY
// 
//
// PG_3D_DIR_YZX
// 
//
// PG_3D_DIR_ZXY
// 
//
// PG_3D_DIR_ZYX
// 
//
//===========================================================================================================


#define PG_3D_DIR_XYZ 0
#define PG_3D_DIR_YXZ 1
#define PG_3D_DIR_XZY 2
#define PG_3D_DIR_YZX 3
#define PG_3D_DIR_ZXY 4
#define PG_3D_DIR_ZYX 5


//===========================================================================================================
//
// PG_BF_CONV Definitions
//
// Pager binary conversions
//
// PG_BF_CONV_NONE
// The Data is in Raw form
//
// PG_BF_CONV_SWAP
// The data needs to be byte swapped
//
//===========================================================================================================


#define PG_BF_CONV_NONE 0
#define PG_BF_CONV_SWAP 1





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================



//===========================================================================================================
//
// 2D Methods Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// Copy_PG Copy the data from one pager to another.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Copy_PG(PG,   // Destination PG object
                       PG);  // Source PG object


  
//-----------------------------------------------------------------------------------------------------------
// CopySubset_PG Copy a subset of data from one pager to another.
//
// Notes         2D Only
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CopySubset_PG(PG,    // Destination PG object
                             PG,    // Source PG object
                             int,   // Y (row) Origin on destination
                             int,   // X (col) Origin on destination
                             int,   // Y (row) Origin on source
                             int,   // X (col) Origin on source
                             int,   // Number of Y (rows) to copy
                             int);  // Number of X (columns) to copy


  
//-----------------------------------------------------------------------------------------------------------
// Create_PG Creates a Pager object
//
// Returns   PG Object
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] PG Create_PG(int,   // # elements in y (# of row)
                       int,   // # elements in x (# of column)
                       int);  // GS_TYPES


  
//-----------------------------------------------------------------------------------------------------------
// CreateS_PG Create a 2D PG from serialized source.
//
// Returns    PG Object
//
// Notes      For 3D pagers, use CreateBF_PG.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] PG CreateS_PG(BF);  //


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_PG This method destroys a table resource.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Destroy_PG(PG);  // Pager Object to Destroy


  
//-----------------------------------------------------------------------------------------------------------
// Dummy_PG Sets the Entire pager to dummy.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Dummy_PG(PG);  // PG object


  
//-----------------------------------------------------------------------------------------------------------
// iEType_PG Gets the type of pager.
//
// Returns   GS_TYPES
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iEType_PG(PG);  // Source PG


  
//-----------------------------------------------------------------------------------------------------------
// iNCols_PG Gets the # of columns in pager.
//
// Returns   # of columns.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iNCols_PG(PG);  // Source PG


  
//-----------------------------------------------------------------------------------------------------------
// iNRows_PG Gets the # of rows in pager.
//
// Returns   # of rows.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iNRows_PG(PG);  // Source PG


  
//-----------------------------------------------------------------------------------------------------------
// iNSlices_PG Gets the # of slices (z) in pager.
//
// Returns     # of rows.
//
// Available   6.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iNSlices_PG(PG);  // Source PG


  
//-----------------------------------------------------------------------------------------------------------
// Range_PG Computes the range of the entire pager.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Range_PG(PG,         // Pager to Range
                        var real,   // Minimum Data (Dummy if no range)
                        var real);  // Maximum Data (Dummy if no range)


  
//-----------------------------------------------------------------------------------------------------------
// rGet_PG Read a single value from a 2D PG
//
// Notes   This is a low-performance method.
//
// Available 8.3
//-----------------------------------------------------------------------------------------------------------

[_public] real rGet_PG(PG,    // hPG - PG handle
                       int,   // iBx - element # in x (column #)
                       int);  // iBy - element # in y (row #)


  
//-----------------------------------------------------------------------------------------------------------
// ReadCol_PG Read a set of elements in X (column) from pager into vv
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ReadCol_PG(PG,    // hPG - PG handle
                          int,   // iBx - element # in x (column #)
                          int,   // iBy - begining element # in y to read (0 is the first)
                          int,   // iNy - # elements to read (0 for whole vector)
                          VV);   // hVV - VV handle


  
//-----------------------------------------------------------------------------------------------------------
// ReadRow_PG Read a set of elements in Y (row) from pager into vv
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ReadRow_PG(PG,    // hPG - PG handle
                          int,   // iBy - element # in y (row #)
                          int,   // iBx - begining element # in x to read (0 is the first)
                          int,   // iNx - # elements to read (0 for whole vector)
                          VV);   // hVV - VV handle


  
//-----------------------------------------------------------------------------------------------------------
// ReAllocate_PG Changes the size of Pager
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ReAllocate_PG(PG,    // PG object
                             int,   // Number of Y (rows) to reallocate
                             int);  // Number of X (columns) to reallocate


  
//-----------------------------------------------------------------------------------------------------------
// Serial_PG Serialize a 2D PG to a BF.
//
// Notes     For 3D pagers, use WriteBF_PG.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Serial_PG(PG,   //
                         BF);  //


  
//-----------------------------------------------------------------------------------------------------------
// Statistics_PG Compute the statistics of a pager object.
//
// Available     6.3.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Statistics_PG(PG,   // hPG - PG handle
                               ST);  // hST - statistics object


  
//-----------------------------------------------------------------------------------------------------------
// WriteCol_PG Write a set of elements in X (column) from vv into pager
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void WriteCol_PG(PG,    // hPG - PG handle
                           int,   // iBx - element # in x (column #)
                           int,   // iBy - begining element # in y to write (0 is the first)
                           int,   // iNy - # elements to write (0 for whole vector)
                           VV);   // hVV - VV handle


  
//-----------------------------------------------------------------------------------------------------------
// WriteRow_PG Write a set of elements in Y (row) from vv into pager
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void WriteRow_PG(PG,    // hPG - PG handle
                           int,   // iBy - element # in y (row #)
                           int,   // iBx - begining element # in x to write (0 is the first)
                           int,   // iNx - # elements to write (0 for whole vector)
                           VV);   // hVV - VV handle



//===========================================================================================================
//
// 3D Methods Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// CopySubset3D_PG Copy a subset of data from one pager to another.
//
// Notes           2D Only
//
// Available       8.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CopySubset3D_PG(PG,    // Destination PG object
                               PG,    // Source PG object
                               int,   // Z (slice) Origin on destination
                               int,   // Y (row) Origin on destination
                               int,   // X (col) Origin on destination
                               int,   // Z (slice) Origin on source
                               int,   // Y (row) Origin on source
                               int,   // X (col) Origin on source
                               int,   // Number of Z (slice) to copy
                               int,   // Number of Y (rows) to copy
                               int);  // Number of X (columns) to copy


  
//-----------------------------------------------------------------------------------------------------------
// Create3D_PG Creates a Pager object
//
// Returns     PG Object
//
// Available   6.2
//-----------------------------------------------------------------------------------------------------------

[_public] PG Create3D_PG(int,   // # elements in z (# of slices)
                         int,   // # elements in y (# of row)
                         int,   // # elements in x (# of column)
                         int);  // GS_TYPES


  
//-----------------------------------------------------------------------------------------------------------
// ReadCol3D_PG Read a set of elements in X (column) from pager into vv
//
// Available    6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ReadCol3D_PG(PG,    // hPG - PG handle
                            int,   // iBz - element # in z (slice #)
                            int,   // iBx - element # in x (column #)
                            int,   // iBy - begining element # in y to read (0 is the first)
                            int,   // iNy - # elements to read (0 for whole vector)
                            VV);   // hVV - VV handle


  
//-----------------------------------------------------------------------------------------------------------
// ReadRow3D_PG Read a set of elements in Y (row) from pager into vv
//
// Available    6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ReadRow3D_PG(PG,    // hPG - PG handle
                            int,   // iBz - element # in z (slice #)
                            int,   // iBy - element # in y (row #)
                            int,   // iBx - begining element # in x to read (0 is the first)
                            int,   // iNx - # elements to read (0 for whole vector)
                            VV);   // hVV - VV handle


  
//-----------------------------------------------------------------------------------------------------------
// ReadTrace3D_PG Read a set of elements in Z (trace) from pager into vv
//
// Available      6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void ReadTrace3D_PG(PG,    // hPG - PG handle
                              int,   // iBx - element # in x (column #)
                              int,   // iBy - element # in y (row #)
                              int,   // iBy - begining element # in z to read (0 is the first)
                              int,   // iNy - # elements to read (0 for whole vector)
                              VV);   // hVV - VV handle


  
//-----------------------------------------------------------------------------------------------------------
// ReAllocate3D_PG Changes the size of 3D Pager
//
// Available       6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ReAllocate3D_PG(PG,    // PG object
                               int,   // Number of Z (slices) to reallocate
                               int,   // Number of Y (rows) to reallocate
                               int);  // Number of X (columns) to reallocate


  
//-----------------------------------------------------------------------------------------------------------
// WriteCol3D_PG Write a set of elements in X (column) from vv into pager
//
// Available     6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void WriteCol3D_PG(PG,    // hPG - PG handle
                             int,   // iBz - element # in z (slice #)
                             int,   // iBx - element # in x (column #)
                             int,   // iBy - begining element # in y to write (0 is the first)
                             int,   // iNy - # elements to write (0 for whole vector)
                             VV);   // hVV - VV handle


  
//-----------------------------------------------------------------------------------------------------------
// WriteRow3D_PG Write a set of elements in Y (row) from vv into pager
//
// Available     6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void WriteRow3D_PG(PG,    // hPG - PG handle
                             int,   // iBz - element # in z (slice #)
                             int,   // iBy - element # in y (row #)
                             int,   // iBx - begining element # in x to write (0 is the first)
                             int,   // iNx - # elements to write (0 for whole vector)
                             VV);   // hVV - VV handle


  
//-----------------------------------------------------------------------------------------------------------
// WriteTrace3D_PG Write a set of elements in Z (trace) from pager into vv
//
// Available       6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void WriteTrace3D_PG(PG,    // hPG - PG handle
                               int,   // iBx - element # in x (column #)
                               int,   // iBy - element # in y (row #)
                               int,   // iBy - begining element # in z to read (0 is the first)
                               int,   // iNy - # elements to read (0 for whole vector)
                               VV);   // hVV - VV handle



//===========================================================================================================
//
// Utility Methods Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// ReadBF_PG Read the contents of a 2D or 3D pager to from a BF.
//
// Available 6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ReadBF_PG(PG,    // PG handle
                         BF,    // BF to read from
                         int,   // PG_3D_DIR
                         int,   // PG_BF_CONV
                         int,   // Reverse X
                         int,   // Reverse Y
                         int);  // Reverse Z


  
//-----------------------------------------------------------------------------------------------------------
// ReadRA_PG Read the contents of a 2D or 3D pager to from an RA.
//
// Notes     Each line must hold only 1 value
//
// Available 6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ReadRA_PG(PG,       // PG handle
                         RA,       // RA to read from
                         int,      // PG_3D_DIR
                         int,      // Reverse X
                         int,      // Reverse Y
                         int,      // Reverse Z
                         string);  // Dummy


  
//-----------------------------------------------------------------------------------------------------------
// WriteBF_PG Write the contents of a 2D or 3D pager to a BF.
//
// Available  6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void WriteBF_PG(PG,    // PG handle
                          BF,    // BF to write to
                          int,   // PG_3D_DIR
                          int,   // PG_BF_CONV
                          int,   // Reverse X
                          int,   // Reverse Y
                          int);  // Reverse Z


  
//-----------------------------------------------------------------------------------------------------------
// WriteBFEx_PG Write the contents of a 2D or 3D pager to a BF.
//
// Available    9.3
//-----------------------------------------------------------------------------------------------------------

[_public] void WriteBFEx_PG(PG,     // PG handle
                            BF,     // BF to write to
                            int,    // PG_3D_DIR
                            int,    // PG_BF_CONV
                            int,    // Reverse X
                            int,    // Reverse Y
                            int,    // Reverse Z
                            real);  // Dummy value


  
//-----------------------------------------------------------------------------------------------------------
// WriteWA_PG Write the contents of a 2D or 3D pager to a WA
//
// Notes      Each line will hold only 1 value
//
// Available  6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void WriteWA_PG(PG,       // PG handle
                          WA,       // WA to write to
                          int,      // PG_3D_DIR
                          int,      // Reverse X
                          int,      // Reverse Y
                          int,      // Reverse Z
                          string);  // Dummy





//*** endblock Generated


#endif
