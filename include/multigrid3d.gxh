//*** extends 'class_empty.gxh'

#ifndef HMULTIGRID3D_GXH_DEFINED
#define HMULTIGRID3D_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class MULTIGRID3D
//
//-----------------------------------------------------------------------------------------------------------
//
// High Performance 3D Grid.
//
//-----------------------------------------------------------------------------------------------------------

//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// DIRECTION3D Definitions
//
// Direction in 3D
//
// DIRECTION3D_XYZ
// XYZ
//
// DIRECTION3D_YXZ
// YXZ
//
// DIRECTION3D_XZY
// XZY
//
// DIRECTION3D_YZX
// YZX
//
// DIRECTION3D_ZXY
// ZXY
//
// DIRECTION3D_ZYX
// ZYX
//
//===========================================================================================================


#define DIRECTION3D_XYZ 0
#define DIRECTION3D_YXZ 1
#define DIRECTION3D_XZY 2
#define DIRECTION3D_YZX 3
#define DIRECTION3D_ZXY 4
#define DIRECTION3D_ZYX 5


//===========================================================================================================
//
// GOCAD_ORIENTATION Definitions
//
// GOCAD Orientations
//
// GOCAD_ORIENTATIONS_NORMAL
// Normal
//
// GOCAD_ORIENTATIONS_INVERTED
// Inverted (Z)
//
// GOCAD_ORIENTATIONS_NORMAL_ZFIRST
// Normal (ZFirst)
//
// GOCAD_ORIENTATIONS_INVERTED_ZFIRST
// Inverted (Z) (ZFirst)
//
//===========================================================================================================


#define GOCAD_ORIENTATIONS_NORMAL 0
#define GOCAD_ORIENTATIONS_INVERTED 1
#define GOCAD_ORIENTATIONS_NORMAL_ZFIRST 2
#define GOCAD_ORIENTATIONS_INVERTED_ZFIRST 3


//===========================================================================================================
//
// VECTOR_IMPORT Definitions
//
// Vector grid3d import direction
//
// VECTOR_IMPORT_XYZ
// X, Y and Z
//
// VECTOR_IMPORT_UVW
// U, V and W
//
// VECTOR_IMPORT_AID
// Amplitude, Inclination and Declination
//
//===========================================================================================================


#define VECTOR_IMPORT_XYZ 0
#define VECTOR_IMPORT_UVW 1
#define VECTOR_IMPORT_AID 2


//===========================================================================================================
//
// FILTER3D Definitions
//
// Voxel filter type
//
// FILTER3D_FILE
// Specify a file containing the 27-point filter
//
// FILTER3D_SMOOTHING
// Smoothing filter
//
// FILTER3D_LAPLACE
// Laplace filter
//
// FILTER3D_X_GRADIENT
// X-Gradient filter
//
// FILTER3D_Y_GRADIENT
// Y-Gradient filter
//
// FILTER3D_Z_GRADIENT
// Z-Gradient filter
//
// FILTER3D_TOTAL_GRADIENT
// Total-Gradient filter
//
//===========================================================================================================


#define FILTER3D_FILE 0
#define FILTER3D_SMOOTHING 1
#define FILTER3D_LAPLACE 2
#define FILTER3D_X_GRADIENT 3
#define FILTER3D_Y_GRADIENT 4
#define FILTER3D_Z_GRADIENT 5
#define FILTER3D_TOTAL_GRADIENT 6


//===========================================================================================================
//
// MULTIGRID3D_DIRECTGRID_METHOD Definitions
//
// How to calculate the cell values for direct gridding.
//
// MULTIGRID3D_DIRECTGRID_MIN
// 
//
// MULTIGRID3D_DIRECTGRID_MAX
// 
//
// MULTIGRID3D_DIRECTGRID_MEAN
// 
//
//===========================================================================================================


#define MULTIGRID3D_DIRECTGRID_MIN 0
#define MULTIGRID3D_DIRECTGRID_MAX 1
#define MULTIGRID3D_DIRECTGRID_MEAN 2





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// Open_MULTIGRID3D Opens an existing Multivoxset
//
// Returns          MULTIGRID3D handle, terminates if creation fails
//
// Available        9.4
//-----------------------------------------------------------------------------------------------------------

[_public] MULTIGRID3D Open_MULTIGRID3D(string);  // File Name


  
//-----------------------------------------------------------------------------------------------------------
// Modify_MULTIGRID3D Opens an existing Multivoxset with an plan to modify it
//
// Returns            MULTIGRID3D handle, terminates if creation fails
//
// Available          9.4
//-----------------------------------------------------------------------------------------------------------

[_public] MULTIGRID3D Modify_MULTIGRID3D(string);  // File Name


  
//-----------------------------------------------------------------------------------------------------------
// Create_MULTIGRID3D Creates a new Multivoxset
//
// Returns            MULTIGRID3D handle, terminates if creation fails
//
// Available          9.4
//-----------------------------------------------------------------------------------------------------------

[_public] MULTIGRID3D Create_MULTIGRID3D(string,   // File Name
                                         int,      // Size in X.
                                         int,      // Size in Y.
                                         int);     // Size in Z.


  
//-----------------------------------------------------------------------------------------------------------
// Duplicate_MULTIGRID3D Creates an MULTIGRID3D with identical geometry to the input
//
// Returns               MULTIGRID3D handle, terminates if creation fails
//
// Available             9.4
//-----------------------------------------------------------------------------------------------------------

[_public] MULTIGRID3D Duplicate_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                            string);       // File Name


  
//-----------------------------------------------------------------------------------------------------------
// GetDefault_MULTIGRID3D Get the default voxset
//
// Returns                GRID3D handle, terminates if creation fails
//
// Available              9.4
//-----------------------------------------------------------------------------------------------------------

[_public] GRID3D GetDefault_MULTIGRID3D(MULTIGRID3D);  // MULTIGRID3D object


  
//-----------------------------------------------------------------------------------------------------------
// CreateDefault_MULTIGRID3D Get the default voxset
//
// Returns                   GRID3D handle, terminates if creation fails
//
// Available                 9.4
//-----------------------------------------------------------------------------------------------------------

[_public] GRID3D CreateDefault_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                           int);          // GRID3D_TYPE


  
//-----------------------------------------------------------------------------------------------------------
// iIsUniformCellSizeX_MULTIGRID3D Is the cell uniform in the X direction
//
// Available                       9.4
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsUniformCellSizeX_MULTIGRID3D(MULTIGRID3D);  // MULTIGRID3D object


  
//-----------------------------------------------------------------------------------------------------------
// iIsUniformCellSizeY_MULTIGRID3D Is the cell uniform in the Y direction
//
// Available                       9.4
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsUniformCellSizeY_MULTIGRID3D(MULTIGRID3D);  // MULTIGRID3D object


  
//-----------------------------------------------------------------------------------------------------------
// iIsUniformCellSizeZ_MULTIGRID3D Is the cell uniform in the Z direction
//
// Available                       9.4
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsUniformCellSizeZ_MULTIGRID3D(MULTIGRID3D);  // MULTIGRID3D object


  
//-----------------------------------------------------------------------------------------------------------
// GetSizeX_MULTIGRID3D Get the number of cells in the X direction
//
// Available            9.4
//-----------------------------------------------------------------------------------------------------------

[_public] int GetSizeX_MULTIGRID3D(MULTIGRID3D);  // MULTIGRID3D object


  
//-----------------------------------------------------------------------------------------------------------
// GetSizeY_MULTIGRID3D Get the number of cells in the X direction
//
// Available            9.4
//-----------------------------------------------------------------------------------------------------------

[_public] int GetSizeY_MULTIGRID3D(MULTIGRID3D);  // MULTIGRID3D object


  
//-----------------------------------------------------------------------------------------------------------
// GetSizeZ_MULTIGRID3D Get the number of cells in the X direction
//
// Available            9.4
//-----------------------------------------------------------------------------------------------------------

[_public] int GetSizeZ_MULTIGRID3D(MULTIGRID3D);  // MULTIGRID3D object


  
//-----------------------------------------------------------------------------------------------------------
// GetCellSizesX_MULTIGRID3D Get the cell sizes in the X direction
//
// Available                 9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetCellSizesX_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                         VV);           // X VV


  
//-----------------------------------------------------------------------------------------------------------
// GetCellSizesY_MULTIGRID3D Get the cell sizes in the Y direction
//
// Available                 9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetCellSizesY_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                         VV);           // Y VV


  
//-----------------------------------------------------------------------------------------------------------
// GetCellSizesZ_MULTIGRID3D Get the cell sizes in the Z direction
//
// Available                 9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetCellSizesZ_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                         VV);           // Z VV


  
//-----------------------------------------------------------------------------------------------------------
// SetCellSizesX_MULTIGRID3D Set the cell sizes in the X direction
//
// Available                 9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SetCellSizesX_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                         VV);           // X VV


  
//-----------------------------------------------------------------------------------------------------------
// SetCellSizesY_MULTIGRID3D Set the cell sizes in the Y direction
//
// Available                 9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SetCellSizesY_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                         VV);           // Y VV


  
//-----------------------------------------------------------------------------------------------------------
// SetCellSizesZ_MULTIGRID3D Set the cell sizes in the Z direction
//
// Available                 9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SetCellSizesZ_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                         VV);           // Z VV


  
//-----------------------------------------------------------------------------------------------------------
// rGetUniformCellSizeX_MULTIGRID3D Get the uniform cell size in the X direction
//
// Available                        9.4
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetUniformCellSizeX_MULTIGRID3D(MULTIGRID3D);  // MULTIGRID3D object


  
//-----------------------------------------------------------------------------------------------------------
// rGetUniformCellSizeY_MULTIGRID3D Get the uniform cell size in the Y direction
//
// Available                        9.4
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetUniformCellSizeY_MULTIGRID3D(MULTIGRID3D);  // MULTIGRID3D object


  
//-----------------------------------------------------------------------------------------------------------
// rGetUniformCellSizeZ_MULTIGRID3D Get the uniform cell size in the Z direction
//
// Available                        9.4
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetUniformCellSizeZ_MULTIGRID3D(MULTIGRID3D);  // MULTIGRID3D object


  
//-----------------------------------------------------------------------------------------------------------
// SetUniformCellSizeX_MULTIGRID3D Set the uniform cell size in the X direction
//
// Available                       9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SetUniformCellSizeX_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                               real);         // cell size


  
//-----------------------------------------------------------------------------------------------------------
// SetUniformCellSizeY_MULTIGRID3D Get the uniform cell size in the Y direction
//
// Available                       9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SetUniformCellSizeY_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                               real);         // cell size


  
//-----------------------------------------------------------------------------------------------------------
// SetUniformCellSizeZ_MULTIGRID3D Get the uniform cell size in the Z direction
//
// Available                       9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SetUniformCellSizeZ_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                               real);         // cell size


  
//-----------------------------------------------------------------------------------------------------------
// GetOrigin_MULTIGRID3D Get the origin
//
// Available             9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetOrigin_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                     var real,      // x
                                     var real,      // y
                                     var real);     // z


  
//-----------------------------------------------------------------------------------------------------------
// SetOrigin_MULTIGRID3D Set the origin
//
// Available             9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SetOrigin_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                     real,          // x
                                     real,          // y
                                     real);         // z


  
//-----------------------------------------------------------------------------------------------------------
// GetBoundingBox_MULTIGRID3D Get the bounding box
//
// Available                  9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetBoundingBox_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                          var real,      // minx
                                          var real,      // miny
                                          var real,      // minz
                                          var real,      // maxx
                                          var real,      // maxy
                                          var real);     // maxz


  
//-----------------------------------------------------------------------------------------------------------
// GetVolumeVectors_MULTIGRID3D Get the direction of the volume
//
// Available                    9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetVolumeVectors_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                            var real,      // origin_x
                                            var real,      // origin_y
                                            var real,      // origin_z
                                            var real,      // X Vector x
                                            var real,      // X Vector y
                                            var real,      // X Vector z
                                            var real,      // Y Vector x
                                            var real,      // Y Vector y
                                            var real,      // Y Vector z
                                            var real,      // Z Vector x
                                            var real,      // Z Vector y
                                            var real);     // Z Vector z


  
//-----------------------------------------------------------------------------------------------------------
// GetOrientedDataExtents_MULTIGRID3D Get the data extents based on an orientation
//
// Available                          9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetOrientedDataExtents_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                                  real,          // oriented_origin_x
                                                  real,          // oriented_origin_y
                                                  real,          // oriented_origin_z
                                                  real,          // X Vector x
                                                  real,          // X Vector y
                                                  real,          // X Vector z
                                                  real,          // Y Vector x
                                                  real,          // Y Vector y
                                                  real,          // Y Vector z
                                                  real,          // Z Vector x
                                                  real,          // Z Vector y
                                                  real,          // Z Vector z
                                                  var real,      // Point1 x
                                                  var real,      // Point1 y
                                                  var real,      // Point1 z
                                                  var real,      // Point2 x
                                                  var real,      // Point2 y
                                                  var real);     // Point2 z


  
//-----------------------------------------------------------------------------------------------------------
// GetSectionCellSizes_MULTIGRID3D Get the cell sizes of a section
//
// Available                       9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetSectionCellSizes_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                               real,          // azimuth
                                               real,          // scale
                                               real,          // x origin
                                               real,          // y origin
                                               real,          // z origin
                                               var real,      // cell size in x
                                               var real);     // cell size in y


  
//-----------------------------------------------------------------------------------------------------------
// Fill_MULTIGRID3D Fill a grid3d.
//
// Available        9.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Fill_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                  string,        // Name of the output grid3d
                                  int,           // PGU_INTERP_ORDER
                                  real);         // Fill Value


  
//-----------------------------------------------------------------------------------------------------------
// GetIPJ_MULTIGRID3D Get the projection of the multigrid3d.
//
// Available          9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetIPJ_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                  IPJ);          // IPJ object


  
//-----------------------------------------------------------------------------------------------------------
// SetIPJ_MULTIGRID3D Set the projection of the multigrid3d.
//
// Available          9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SetIPJ_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                  IPJ);          // IPJ object


  
//-----------------------------------------------------------------------------------------------------------
// ExportToXYZ_MULTIGRID3D Export a MULTIGRID3D to an XYZ File
//
// Available               9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportToXYZ_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                       string,        // File Name
                                       int,           // DIRECTION3D
                                       int,           // Reverse X?
                                       int,           // Reverse Y?
                                       int,           // Reverse Z?
                                       int);          // Write Dummies?


  
//-----------------------------------------------------------------------------------------------------------
// ExportToBinary_MULTIGRID3D Export contents of MULTIGRID3D to a Binary File.
//
// Available                  9.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportToBinary_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                            string,        // Binary file to write to
                                            int,           // DIRECTION3D
                                            int,           // Reverse X?
                                            int,           // Reverse Y?
                                            int,           // Reverse Z?
                                            int,           // Swap Bytes?
                                            int);          // Output Type (Geosoft Type)


  
//-----------------------------------------------------------------------------------------------------------
// ExportToXML_MULTIGRID3D Export a MULTIGRID3D to XML
//
// Available               9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportToXML_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                       string);       // XML file


  
//-----------------------------------------------------------------------------------------------------------
// ExportToWA_MULTIGRID3D Export To GDB
//
// Available              9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportToWA_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                      WA,            // WA File
                                      int,           // DIRECTION3D
                                      int,           // Reverse X?
                                      int,           // Reverse Y?
                                      int,           // Reverse Z?
                                      string);       // The Dummy string to write


  
//-----------------------------------------------------------------------------------------------------------
// ExportToGDB_MULTIGRID3D Export To GDB
//
// Available               9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportToGDB_MULTIGRID3D(MULTIGRID3D,   // MULTIGRID3D object
                                       DB,            // Database
                                       string,        // Channel Name
                                       int,           // DIRECTION3D
                                       int,           // Reverse X?
                                       int,           // Reverse Y?
                                       int,           // Reverse Z?
                                       int);          // Write Dummies?


  
//-----------------------------------------------------------------------------------------------------------
// ExportToPG_MULTIGRID3D Export a MULTIGRID3D To a PG
//
// Returns                PG Object
//
// Available              9.4
//-----------------------------------------------------------------------------------------------------------

[_public] PG ExportToPG_MULTIGRID3D(MULTIGRID3D);  // MULTIGRID3D object





//*** endblock Generated


#endif
